rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Usuario: documento principal
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Subcolección de transacciones: /users/{userId}/transactions/{transactionId}
    match /users/{userId}/transactions/{transactionId} {
      // Leer: solo el dueño autenticado
      allow read: if request.auth != null && request.auth.uid == userId;

      // Crear: uid debe coincidir con el path y con el campo userId
      allow create: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == request.resource.data.userId &&
        validateTransactionData(request.resource.data);

      // Actualizar: validación y pertenencia
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        validateTransactionData(request.resource.data);

      // Eliminar: solo el dueño
      allow delete: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == resource.data.userId;
    }

    // (Compatibilidad) Si aún existe colección a nivel raíz
    match /transactions/{transactionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateTransactionData(request.resource.data);
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        validateTransactionData(request.resource.data);
    }

    // Subcolección de ahorros: /users/{userId}/savings/{savingId}
    match /users/{userId}/savings/{savingId} {
      // Leer: solo el dueño autenticado
      allow read: if request.auth != null && request.auth.uid == userId;

      // Crear: uid debe coincidir con el path y con el campo userId
      allow create: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == request.resource.data.userId &&
        validateSavingData(request.resource.data);

      // Actualizar: validación y pertenencia
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        validateSavingData(request.resource.data);

      // Eliminar: solo el dueño
      allow delete: if request.auth != null &&
        request.auth.uid == userId &&
        request.auth.uid == resource.data.userId;
    }

    // Validación de datos de transacción
    function validateTransactionData(data) {
      return data.keys().hasAll(['userId', 'type', 'category', 'amount', 'date', 'paymentMethod']) &&
        data.userId is string &&
        data.type in ['gasto', 'ingreso'] &&
        data.category is string &&
        data.amount is number &&
        data.amount > 0 &&
        data.date is string &&
        data.paymentMethod is string &&
        data.description is string &&
        (data.subcategory == null || data.subcategory is string) &&
        (data.installments == null || (data.installments is number && data.installments > 0)) &&
        (data.installmentsPaid == null || (data.installmentsPaid is number && data.installmentsPaid >= 0)) &&
        data.createdAt is timestamp &&
        (data.updatedAt == null || data.updatedAt is timestamp);
    }

    // Validación de datos de ahorros
    function validateSavingData(data) {
      return data.keys().hasAll(['userId', 'year', 'month', 'amount']) &&
        data.userId is string &&
        data.year is number &&
        data.year >= 2020 && data.year <= 2030 &&
        data.month is number &&
        data.month >= 1 && data.month <= 12 &&
        data.amount is number &&
        data.amount >= 0 &&
        (data.note == null || data.note is string) &&
        data.createdAt is timestamp &&
        (data.updatedAt == null || data.updatedAt is timestamp);
    }
  }
}